/*
PingOne Advanced Identity Cloud API

## Introduction The PingOne Advanced Identity Cloud REST API lets you manage your Advanced Identity Cloud tenants. The API exposes access management and identity management endpoints, with additional endpoints specific to Advanced Identity Cloud tenant environments.<br /><br /> We are now publishing the API spec in OpenAPI 3.0. For the legacy Swagger 2.0 spec, please download [swagger.yaml](swagger.yaml), but note that it may not contain all new functionality.<br /><br /> For full PingOne Advanced Identity Cloud documentation, please visit [the docs website](https://docs.pingidentity.com/pingoneaic/latest/). ## Authenticating to the API The PingOne Advanced Identity Cloud REST API has two different authentication methods:   - [API key and secret](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-api-key-and-secret.html): used for tenant read-only operations  - [Access token](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-access-token.html): used for access management operations, identity management operations or tenant write operations  For a summary of how to use these authentication methods, refer to [Authenticate to Advanced Identity Cloud REST API](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-overview.html).

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aic

import (
	"encoding/json"
)

// checks if the P1Connect type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &P1Connect{}

// P1Connect struct for P1Connect
type P1Connect struct {
	Active               *bool   `json:"active,omitempty"`
	AdminClientId        *string `json:"adminClientId,omitempty"`
	DefaultIssuer        *string `json:"defaultIssuer,omitempty"`
	IdpAuthEndpoint      *string `json:"idpAuthEndpoint,omitempty"`
	IdpClientId          *string `json:"idpClientId,omitempty"`
	IdpEnabled           *bool   `json:"idpEnabled,omitempty"`
	IdpIssuer            *string `json:"idpIssuer,omitempty"`
	IdpTokenEndpoint     *string `json:"idpTokenEndpoint,omitempty"`
	IdpWellKnownEndpoint *string `json:"idpWellKnownEndpoint,omitempty"`
}

// NewP1Connect instantiates a new P1Connect object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewP1Connect() *P1Connect {
	this := P1Connect{}
	return &this
}

// NewP1ConnectWithDefaults instantiates a new P1Connect object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewP1ConnectWithDefaults() *P1Connect {
	this := P1Connect{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *P1Connect) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P1Connect) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *P1Connect) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *P1Connect) SetActive(v bool) {
	o.Active = &v
}

// GetAdminClientId returns the AdminClientId field value if set, zero value otherwise.
func (o *P1Connect) GetAdminClientId() string {
	if o == nil || IsNil(o.AdminClientId) {
		var ret string
		return ret
	}
	return *o.AdminClientId
}

// GetAdminClientIdOk returns a tuple with the AdminClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P1Connect) GetAdminClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.AdminClientId) {
		return nil, false
	}
	return o.AdminClientId, true
}

// HasAdminClientId returns a boolean if a field has been set.
func (o *P1Connect) HasAdminClientId() bool {
	if o != nil && !IsNil(o.AdminClientId) {
		return true
	}

	return false
}

// SetAdminClientId gets a reference to the given string and assigns it to the AdminClientId field.
func (o *P1Connect) SetAdminClientId(v string) {
	o.AdminClientId = &v
}

// GetDefaultIssuer returns the DefaultIssuer field value if set, zero value otherwise.
func (o *P1Connect) GetDefaultIssuer() string {
	if o == nil || IsNil(o.DefaultIssuer) {
		var ret string
		return ret
	}
	return *o.DefaultIssuer
}

// GetDefaultIssuerOk returns a tuple with the DefaultIssuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P1Connect) GetDefaultIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultIssuer) {
		return nil, false
	}
	return o.DefaultIssuer, true
}

// HasDefaultIssuer returns a boolean if a field has been set.
func (o *P1Connect) HasDefaultIssuer() bool {
	if o != nil && !IsNil(o.DefaultIssuer) {
		return true
	}

	return false
}

// SetDefaultIssuer gets a reference to the given string and assigns it to the DefaultIssuer field.
func (o *P1Connect) SetDefaultIssuer(v string) {
	o.DefaultIssuer = &v
}

// GetIdpAuthEndpoint returns the IdpAuthEndpoint field value if set, zero value otherwise.
func (o *P1Connect) GetIdpAuthEndpoint() string {
	if o == nil || IsNil(o.IdpAuthEndpoint) {
		var ret string
		return ret
	}
	return *o.IdpAuthEndpoint
}

// GetIdpAuthEndpointOk returns a tuple with the IdpAuthEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P1Connect) GetIdpAuthEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.IdpAuthEndpoint) {
		return nil, false
	}
	return o.IdpAuthEndpoint, true
}

// HasIdpAuthEndpoint returns a boolean if a field has been set.
func (o *P1Connect) HasIdpAuthEndpoint() bool {
	if o != nil && !IsNil(o.IdpAuthEndpoint) {
		return true
	}

	return false
}

// SetIdpAuthEndpoint gets a reference to the given string and assigns it to the IdpAuthEndpoint field.
func (o *P1Connect) SetIdpAuthEndpoint(v string) {
	o.IdpAuthEndpoint = &v
}

// GetIdpClientId returns the IdpClientId field value if set, zero value otherwise.
func (o *P1Connect) GetIdpClientId() string {
	if o == nil || IsNil(o.IdpClientId) {
		var ret string
		return ret
	}
	return *o.IdpClientId
}

// GetIdpClientIdOk returns a tuple with the IdpClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P1Connect) GetIdpClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.IdpClientId) {
		return nil, false
	}
	return o.IdpClientId, true
}

// HasIdpClientId returns a boolean if a field has been set.
func (o *P1Connect) HasIdpClientId() bool {
	if o != nil && !IsNil(o.IdpClientId) {
		return true
	}

	return false
}

// SetIdpClientId gets a reference to the given string and assigns it to the IdpClientId field.
func (o *P1Connect) SetIdpClientId(v string) {
	o.IdpClientId = &v
}

// GetIdpEnabled returns the IdpEnabled field value if set, zero value otherwise.
func (o *P1Connect) GetIdpEnabled() bool {
	if o == nil || IsNil(o.IdpEnabled) {
		var ret bool
		return ret
	}
	return *o.IdpEnabled
}

// GetIdpEnabledOk returns a tuple with the IdpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P1Connect) GetIdpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IdpEnabled) {
		return nil, false
	}
	return o.IdpEnabled, true
}

// HasIdpEnabled returns a boolean if a field has been set.
func (o *P1Connect) HasIdpEnabled() bool {
	if o != nil && !IsNil(o.IdpEnabled) {
		return true
	}

	return false
}

// SetIdpEnabled gets a reference to the given bool and assigns it to the IdpEnabled field.
func (o *P1Connect) SetIdpEnabled(v bool) {
	o.IdpEnabled = &v
}

// GetIdpIssuer returns the IdpIssuer field value if set, zero value otherwise.
func (o *P1Connect) GetIdpIssuer() string {
	if o == nil || IsNil(o.IdpIssuer) {
		var ret string
		return ret
	}
	return *o.IdpIssuer
}

// GetIdpIssuerOk returns a tuple with the IdpIssuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P1Connect) GetIdpIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.IdpIssuer) {
		return nil, false
	}
	return o.IdpIssuer, true
}

// HasIdpIssuer returns a boolean if a field has been set.
func (o *P1Connect) HasIdpIssuer() bool {
	if o != nil && !IsNil(o.IdpIssuer) {
		return true
	}

	return false
}

// SetIdpIssuer gets a reference to the given string and assigns it to the IdpIssuer field.
func (o *P1Connect) SetIdpIssuer(v string) {
	o.IdpIssuer = &v
}

// GetIdpTokenEndpoint returns the IdpTokenEndpoint field value if set, zero value otherwise.
func (o *P1Connect) GetIdpTokenEndpoint() string {
	if o == nil || IsNil(o.IdpTokenEndpoint) {
		var ret string
		return ret
	}
	return *o.IdpTokenEndpoint
}

// GetIdpTokenEndpointOk returns a tuple with the IdpTokenEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P1Connect) GetIdpTokenEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.IdpTokenEndpoint) {
		return nil, false
	}
	return o.IdpTokenEndpoint, true
}

// HasIdpTokenEndpoint returns a boolean if a field has been set.
func (o *P1Connect) HasIdpTokenEndpoint() bool {
	if o != nil && !IsNil(o.IdpTokenEndpoint) {
		return true
	}

	return false
}

// SetIdpTokenEndpoint gets a reference to the given string and assigns it to the IdpTokenEndpoint field.
func (o *P1Connect) SetIdpTokenEndpoint(v string) {
	o.IdpTokenEndpoint = &v
}

// GetIdpWellKnownEndpoint returns the IdpWellKnownEndpoint field value if set, zero value otherwise.
func (o *P1Connect) GetIdpWellKnownEndpoint() string {
	if o == nil || IsNil(o.IdpWellKnownEndpoint) {
		var ret string
		return ret
	}
	return *o.IdpWellKnownEndpoint
}

// GetIdpWellKnownEndpointOk returns a tuple with the IdpWellKnownEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P1Connect) GetIdpWellKnownEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.IdpWellKnownEndpoint) {
		return nil, false
	}
	return o.IdpWellKnownEndpoint, true
}

// HasIdpWellKnownEndpoint returns a boolean if a field has been set.
func (o *P1Connect) HasIdpWellKnownEndpoint() bool {
	if o != nil && !IsNil(o.IdpWellKnownEndpoint) {
		return true
	}

	return false
}

// SetIdpWellKnownEndpoint gets a reference to the given string and assigns it to the IdpWellKnownEndpoint field.
func (o *P1Connect) SetIdpWellKnownEndpoint(v string) {
	o.IdpWellKnownEndpoint = &v
}

func (o P1Connect) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o P1Connect) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AdminClientId) {
		toSerialize["adminClientId"] = o.AdminClientId
	}
	if !IsNil(o.DefaultIssuer) {
		toSerialize["defaultIssuer"] = o.DefaultIssuer
	}
	if !IsNil(o.IdpAuthEndpoint) {
		toSerialize["idpAuthEndpoint"] = o.IdpAuthEndpoint
	}
	if !IsNil(o.IdpClientId) {
		toSerialize["idpClientId"] = o.IdpClientId
	}
	if !IsNil(o.IdpEnabled) {
		toSerialize["idpEnabled"] = o.IdpEnabled
	}
	if !IsNil(o.IdpIssuer) {
		toSerialize["idpIssuer"] = o.IdpIssuer
	}
	if !IsNil(o.IdpTokenEndpoint) {
		toSerialize["idpTokenEndpoint"] = o.IdpTokenEndpoint
	}
	if !IsNil(o.IdpWellKnownEndpoint) {
		toSerialize["idpWellKnownEndpoint"] = o.IdpWellKnownEndpoint
	}
	return toSerialize, nil
}

type NullableP1Connect struct {
	value *P1Connect
	isSet bool
}

func (v NullableP1Connect) Get() *P1Connect {
	return v.value
}

func (v *NullableP1Connect) Set(val *P1Connect) {
	v.value = val
	v.isSet = true
}

func (v NullableP1Connect) IsSet() bool {
	return v.isSet
}

func (v *NullableP1Connect) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableP1Connect(val *P1Connect) *NullableP1Connect {
	return &NullableP1Connect{value: val, isSet: true}
}

func (v NullableP1Connect) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableP1Connect) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
