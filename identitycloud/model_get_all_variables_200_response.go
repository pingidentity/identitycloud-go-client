/*
PingOne Advanced Identity Cloud API

## Introduction The PingOne Advanced Identity Cloud REST API lets you manage your Advanced Identity Cloud tenants. The API exposes access management and identity management endpoints, with additional endpoints specific to Advanced Identity Cloud tenant environments.<br /><br /> We are now publishing the API spec in OpenAPI 3.0. For the legacy Swagger 2.0 spec, please download [swagger.yaml](swagger.yaml), but note that it may not contain all new functionality.<br /><br /> For full PingOne Advanced Identity Cloud documentation, please visit [the docs website](https://docs.pingidentity.com/pingoneaic/latest/). ## Authenticating to the API The PingOne Advanced Identity Cloud REST API has two different authentication methods:   - [API key and secret](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-api-key-and-secret.html): used for tenant read-only operations  - [Access token](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-access-token.html): used for access management operations, identity management operations or tenant write operations  For a summary of how to use these authentication methods, refer to [Authenticate to Advanced Identity Cloud REST API](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-overview.html).

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identitycloud

import (
	"encoding/json"
	"fmt"
)

// GetAllVariables200Response - struct for GetAllVariables200Response
type GetAllVariables200Response struct {
	EsvVariableListV1 *EsvVariableListV1
	EsvVariableListV2 *EsvVariableListV2
}

// EsvVariableListV1AsGetAllVariables200Response is a convenience function that returns EsvVariableListV1 wrapped in GetAllVariables200Response
func EsvVariableListV1AsGetAllVariables200Response(v *EsvVariableListV1) GetAllVariables200Response {
	return GetAllVariables200Response{
		EsvVariableListV1: v,
	}
}

// EsvVariableListV2AsGetAllVariables200Response is a convenience function that returns EsvVariableListV2 wrapped in GetAllVariables200Response
func EsvVariableListV2AsGetAllVariables200Response(v *EsvVariableListV2) GetAllVariables200Response {
	return GetAllVariables200Response{
		EsvVariableListV2: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetAllVariables200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EsvVariableListV1
	err = json.Unmarshal(data, &dst.EsvVariableListV1)
	if err == nil {
		jsonEsvVariableListV1, _ := json.Marshal(dst.EsvVariableListV1)
		if string(jsonEsvVariableListV1) == "{}" { // empty struct
			dst.EsvVariableListV1 = nil
		} else {
			match++
		}
	} else {
		dst.EsvVariableListV1 = nil
	}

	// try to unmarshal data into EsvVariableListV2
	err = json.Unmarshal(data, &dst.EsvVariableListV2)
	if err == nil {
		jsonEsvVariableListV2, _ := json.Marshal(dst.EsvVariableListV2)
		if string(jsonEsvVariableListV2) == "{}" { // empty struct
			dst.EsvVariableListV2 = nil
		} else {
			match++
		}
	} else {
		dst.EsvVariableListV2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EsvVariableListV1 = nil
		dst.EsvVariableListV2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetAllVariables200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetAllVariables200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetAllVariables200Response) MarshalJSON() ([]byte, error) {
	if src.EsvVariableListV1 != nil {
		return json.Marshal(&src.EsvVariableListV1)
	}

	if src.EsvVariableListV2 != nil {
		return json.Marshal(&src.EsvVariableListV2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetAllVariables200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.EsvVariableListV1 != nil {
		return obj.EsvVariableListV1
	}

	if obj.EsvVariableListV2 != nil {
		return obj.EsvVariableListV2
	}

	// all schemas are nil
	return nil
}

type NullableGetAllVariables200Response struct {
	value *GetAllVariables200Response
	isSet bool
}

func (v NullableGetAllVariables200Response) Get() *GetAllVariables200Response {
	return v.value
}

func (v *NullableGetAllVariables200Response) Set(val *GetAllVariables200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAllVariables200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAllVariables200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAllVariables200Response(val *GetAllVariables200Response) *NullableGetAllVariables200Response {
	return &NullableGetAllVariables200Response{value: val, isSet: true}
}

func (v NullableGetAllVariables200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAllVariables200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
