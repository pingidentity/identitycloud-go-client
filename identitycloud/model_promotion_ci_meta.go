/*
PingOne Advanced Identity Cloud API

## Introduction The PingOne Advanced Identity Cloud REST API lets you manage your Advanced Identity Cloud tenants. The API exposes access management and identity management endpoints, with additional endpoints specific to Advanced Identity Cloud tenant environments.<br /><br /> We are now publishing the API spec in OpenAPI 3.0. For the legacy Swagger 2.0 spec, please download [swagger.yaml](swagger.yaml), but note that it may not contain all new functionality.<br /><br /> For full PingOne Advanced Identity Cloud documentation, please visit [the docs website](https://docs.pingidentity.com/pingoneaic/latest/). ## Authenticating to the API The PingOne Advanced Identity Cloud REST API has two different authentication methods:   - [API key and secret](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-api-key-and-secret.html): used for tenant read-only operations  - [Access token](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-access-token.html): used for access management operations, identity management operations or tenant write operations  For a summary of how to use these authentication methods, refer to [Authenticate to Advanced Identity Cloud REST API](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-overview.html).

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identitycloud

import (
	"encoding/json"
)

// checks if the PromotionCIMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PromotionCIMeta{}

// PromotionCIMeta struct for PromotionCIMeta
type PromotionCIMeta struct {
	Name  *string `json:"name,omitempty"`
	Realm *string `json:"realm,omitempty"`
	Uid   *string `json:"uid,omitempty"`
}

// NewPromotionCIMeta instantiates a new PromotionCIMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPromotionCIMeta() *PromotionCIMeta {
	this := PromotionCIMeta{}
	return &this
}

// NewPromotionCIMetaWithDefaults instantiates a new PromotionCIMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPromotionCIMetaWithDefaults() *PromotionCIMeta {
	this := PromotionCIMeta{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PromotionCIMeta) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionCIMeta) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PromotionCIMeta) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PromotionCIMeta) SetName(v string) {
	o.Name = &v
}

// GetRealm returns the Realm field value if set, zero value otherwise.
func (o *PromotionCIMeta) GetRealm() string {
	if o == nil || IsNil(o.Realm) {
		var ret string
		return ret
	}
	return *o.Realm
}

// GetRealmOk returns a tuple with the Realm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionCIMeta) GetRealmOk() (*string, bool) {
	if o == nil || IsNil(o.Realm) {
		return nil, false
	}
	return o.Realm, true
}

// HasRealm returns a boolean if a field has been set.
func (o *PromotionCIMeta) HasRealm() bool {
	if o != nil && !IsNil(o.Realm) {
		return true
	}

	return false
}

// SetRealm gets a reference to the given string and assigns it to the Realm field.
func (o *PromotionCIMeta) SetRealm(v string) {
	o.Realm = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *PromotionCIMeta) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionCIMeta) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *PromotionCIMeta) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *PromotionCIMeta) SetUid(v string) {
	o.Uid = &v
}

func (o PromotionCIMeta) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PromotionCIMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Realm) {
		toSerialize["realm"] = o.Realm
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	return toSerialize, nil
}

type NullablePromotionCIMeta struct {
	value *PromotionCIMeta
	isSet bool
}

func (v NullablePromotionCIMeta) Get() *PromotionCIMeta {
	return v.value
}

func (v *NullablePromotionCIMeta) Set(val *PromotionCIMeta) {
	v.value = val
	v.isSet = true
}

func (v NullablePromotionCIMeta) IsSet() bool {
	return v.isSet
}

func (v *NullablePromotionCIMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromotionCIMeta(val *PromotionCIMeta) *NullablePromotionCIMeta {
	return &NullablePromotionCIMeta{value: val, isSet: true}
}

func (v NullablePromotionCIMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromotionCIMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
