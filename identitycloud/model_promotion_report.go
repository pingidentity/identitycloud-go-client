// Copyright Â© 2025 Ping Identity Corporation

/*
PingOne Advanced Identity Cloud API

## Introduction The PingOne Advanced Identity Cloud REST API lets you manage your Advanced Identity Cloud tenants. The API exposes access management and identity management endpoints, with additional endpoints specific to Advanced Identity Cloud tenant environments.<br /><br /> We are now publishing the API spec in OpenAPI 3.0. For the legacy Swagger 2.0 spec, please download [swagger.yaml](swagger.yaml), but note that it may not contain all new functionality.<br /><br /> For full PingOne Advanced Identity Cloud documentation, please visit [the docs website](https://docs.pingidentity.com/pingoneaic/latest/). ## Authenticating to the API The PingOne Advanced Identity Cloud REST API has two different authentication methods:   - [API key and secret](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-api-key-and-secret.html): used for tenant read-only operations  - [Access token](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-access-token.html): used for access management operations, identity management operations or tenant write operations  For a summary of how to use these authentication methods, refer to [Authenticate to Advanced Identity Cloud REST API](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-overview.html).

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identitycloud

import (
	"encoding/json"
)

// checks if the PromotionReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PromotionReport{}

// PromotionReport struct for PromotionReport
type PromotionReport struct {
	CreatedDate                       *string  `json:"createdDate,omitempty"`
	DryRun                            *bool    `json:"dryRun,omitempty"`
	MissingESVs                       []string `json:"missingESVs,omitempty"`
	PreviouslyIgnoredEncryptedSecrets []string `json:"previouslyIgnoredEncryptedSecrets,omitempty"`
	// The name of the admin user who requested the promotion
	Promoter *string `json:"promoter,omitempty"`
	// Promoter specified note to make it easier for them to identify what was promoted
	PromotionDescription *string                `json:"promotionDescription,omitempty"`
	PromotionId          *string                `json:"promotionId,omitempty"`
	Report               *PromotionReportReport `json:"report,omitempty"`
	ReportId             *string                `json:"reportId,omitempty"`
	ReportName           *string                `json:"reportName,omitempty"`
	// Either promotion or rollback depending on whether the report was for a config promotion or a config rollback
	Type *string `json:"type,omitempty"`
}

// NewPromotionReport instantiates a new PromotionReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPromotionReport() *PromotionReport {
	this := PromotionReport{}
	return &this
}

// NewPromotionReportWithDefaults instantiates a new PromotionReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPromotionReportWithDefaults() *PromotionReport {
	this := PromotionReport{}
	return &this
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *PromotionReport) GetCreatedDate() string {
	if o == nil || IsNil(o.CreatedDate) {
		var ret string
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetCreatedDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *PromotionReport) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given string and assigns it to the CreatedDate field.
func (o *PromotionReport) SetCreatedDate(v string) {
	o.CreatedDate = &v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *PromotionReport) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *PromotionReport) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *PromotionReport) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetMissingESVs returns the MissingESVs field value if set, zero value otherwise.
func (o *PromotionReport) GetMissingESVs() []string {
	if o == nil || IsNil(o.MissingESVs) {
		var ret []string
		return ret
	}
	return o.MissingESVs
}

// GetMissingESVsOk returns a tuple with the MissingESVs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetMissingESVsOk() ([]string, bool) {
	if o == nil || IsNil(o.MissingESVs) {
		return nil, false
	}
	return o.MissingESVs, true
}

// HasMissingESVs returns a boolean if a field has been set.
func (o *PromotionReport) HasMissingESVs() bool {
	if o != nil && !IsNil(o.MissingESVs) {
		return true
	}

	return false
}

// SetMissingESVs gets a reference to the given []string and assigns it to the MissingESVs field.
func (o *PromotionReport) SetMissingESVs(v []string) {
	o.MissingESVs = v
}

// GetPreviouslyIgnoredEncryptedSecrets returns the PreviouslyIgnoredEncryptedSecrets field value if set, zero value otherwise.
func (o *PromotionReport) GetPreviouslyIgnoredEncryptedSecrets() []string {
	if o == nil || IsNil(o.PreviouslyIgnoredEncryptedSecrets) {
		var ret []string
		return ret
	}
	return o.PreviouslyIgnoredEncryptedSecrets
}

// GetPreviouslyIgnoredEncryptedSecretsOk returns a tuple with the PreviouslyIgnoredEncryptedSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetPreviouslyIgnoredEncryptedSecretsOk() ([]string, bool) {
	if o == nil || IsNil(o.PreviouslyIgnoredEncryptedSecrets) {
		return nil, false
	}
	return o.PreviouslyIgnoredEncryptedSecrets, true
}

// HasPreviouslyIgnoredEncryptedSecrets returns a boolean if a field has been set.
func (o *PromotionReport) HasPreviouslyIgnoredEncryptedSecrets() bool {
	if o != nil && !IsNil(o.PreviouslyIgnoredEncryptedSecrets) {
		return true
	}

	return false
}

// SetPreviouslyIgnoredEncryptedSecrets gets a reference to the given []string and assigns it to the PreviouslyIgnoredEncryptedSecrets field.
func (o *PromotionReport) SetPreviouslyIgnoredEncryptedSecrets(v []string) {
	o.PreviouslyIgnoredEncryptedSecrets = v
}

// GetPromoter returns the Promoter field value if set, zero value otherwise.
func (o *PromotionReport) GetPromoter() string {
	if o == nil || IsNil(o.Promoter) {
		var ret string
		return ret
	}
	return *o.Promoter
}

// GetPromoterOk returns a tuple with the Promoter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetPromoterOk() (*string, bool) {
	if o == nil || IsNil(o.Promoter) {
		return nil, false
	}
	return o.Promoter, true
}

// HasPromoter returns a boolean if a field has been set.
func (o *PromotionReport) HasPromoter() bool {
	if o != nil && !IsNil(o.Promoter) {
		return true
	}

	return false
}

// SetPromoter gets a reference to the given string and assigns it to the Promoter field.
func (o *PromotionReport) SetPromoter(v string) {
	o.Promoter = &v
}

// GetPromotionDescription returns the PromotionDescription field value if set, zero value otherwise.
func (o *PromotionReport) GetPromotionDescription() string {
	if o == nil || IsNil(o.PromotionDescription) {
		var ret string
		return ret
	}
	return *o.PromotionDescription
}

// GetPromotionDescriptionOk returns a tuple with the PromotionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetPromotionDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PromotionDescription) {
		return nil, false
	}
	return o.PromotionDescription, true
}

// HasPromotionDescription returns a boolean if a field has been set.
func (o *PromotionReport) HasPromotionDescription() bool {
	if o != nil && !IsNil(o.PromotionDescription) {
		return true
	}

	return false
}

// SetPromotionDescription gets a reference to the given string and assigns it to the PromotionDescription field.
func (o *PromotionReport) SetPromotionDescription(v string) {
	o.PromotionDescription = &v
}

// GetPromotionId returns the PromotionId field value if set, zero value otherwise.
func (o *PromotionReport) GetPromotionId() string {
	if o == nil || IsNil(o.PromotionId) {
		var ret string
		return ret
	}
	return *o.PromotionId
}

// GetPromotionIdOk returns a tuple with the PromotionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetPromotionIdOk() (*string, bool) {
	if o == nil || IsNil(o.PromotionId) {
		return nil, false
	}
	return o.PromotionId, true
}

// HasPromotionId returns a boolean if a field has been set.
func (o *PromotionReport) HasPromotionId() bool {
	if o != nil && !IsNil(o.PromotionId) {
		return true
	}

	return false
}

// SetPromotionId gets a reference to the given string and assigns it to the PromotionId field.
func (o *PromotionReport) SetPromotionId(v string) {
	o.PromotionId = &v
}

// GetReport returns the Report field value if set, zero value otherwise.
func (o *PromotionReport) GetReport() PromotionReportReport {
	if o == nil || IsNil(o.Report) {
		var ret PromotionReportReport
		return ret
	}
	return *o.Report
}

// GetReportOk returns a tuple with the Report field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetReportOk() (*PromotionReportReport, bool) {
	if o == nil || IsNil(o.Report) {
		return nil, false
	}
	return o.Report, true
}

// HasReport returns a boolean if a field has been set.
func (o *PromotionReport) HasReport() bool {
	if o != nil && !IsNil(o.Report) {
		return true
	}

	return false
}

// SetReport gets a reference to the given PromotionReportReport and assigns it to the Report field.
func (o *PromotionReport) SetReport(v PromotionReportReport) {
	o.Report = &v
}

// GetReportId returns the ReportId field value if set, zero value otherwise.
func (o *PromotionReport) GetReportId() string {
	if o == nil || IsNil(o.ReportId) {
		var ret string
		return ret
	}
	return *o.ReportId
}

// GetReportIdOk returns a tuple with the ReportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetReportIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReportId) {
		return nil, false
	}
	return o.ReportId, true
}

// HasReportId returns a boolean if a field has been set.
func (o *PromotionReport) HasReportId() bool {
	if o != nil && !IsNil(o.ReportId) {
		return true
	}

	return false
}

// SetReportId gets a reference to the given string and assigns it to the ReportId field.
func (o *PromotionReport) SetReportId(v string) {
	o.ReportId = &v
}

// GetReportName returns the ReportName field value if set, zero value otherwise.
func (o *PromotionReport) GetReportName() string {
	if o == nil || IsNil(o.ReportName) {
		var ret string
		return ret
	}
	return *o.ReportName
}

// GetReportNameOk returns a tuple with the ReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetReportNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReportName) {
		return nil, false
	}
	return o.ReportName, true
}

// HasReportName returns a boolean if a field has been set.
func (o *PromotionReport) HasReportName() bool {
	if o != nil && !IsNil(o.ReportName) {
		return true
	}

	return false
}

// SetReportName gets a reference to the given string and assigns it to the ReportName field.
func (o *PromotionReport) SetReportName(v string) {
	o.ReportName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PromotionReport) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromotionReport) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PromotionReport) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PromotionReport) SetType(v string) {
	o.Type = &v
}

func (o PromotionReport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PromotionReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.DryRun) {
		toSerialize["dryRun"] = o.DryRun
	}
	if !IsNil(o.MissingESVs) {
		toSerialize["missingESVs"] = o.MissingESVs
	}
	if !IsNil(o.PreviouslyIgnoredEncryptedSecrets) {
		toSerialize["previouslyIgnoredEncryptedSecrets"] = o.PreviouslyIgnoredEncryptedSecrets
	}
	if !IsNil(o.Promoter) {
		toSerialize["promoter"] = o.Promoter
	}
	if !IsNil(o.PromotionDescription) {
		toSerialize["promotionDescription"] = o.PromotionDescription
	}
	if !IsNil(o.PromotionId) {
		toSerialize["promotionId"] = o.PromotionId
	}
	if !IsNil(o.Report) {
		toSerialize["report"] = o.Report
	}
	if !IsNil(o.ReportId) {
		toSerialize["reportId"] = o.ReportId
	}
	if !IsNil(o.ReportName) {
		toSerialize["reportName"] = o.ReportName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePromotionReport struct {
	value *PromotionReport
	isSet bool
}

func (v NullablePromotionReport) Get() *PromotionReport {
	return v.value
}

func (v *NullablePromotionReport) Set(val *PromotionReport) {
	v.value = val
	v.isSet = true
}

func (v NullablePromotionReport) IsSet() bool {
	return v.isSet
}

func (v *NullablePromotionReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromotionReport(val *PromotionReport) *NullablePromotionReport {
	return &NullablePromotionReport{value: val, isSet: true}
}

func (v NullablePromotionReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromotionReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
