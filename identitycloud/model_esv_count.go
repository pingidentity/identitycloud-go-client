// Copyright Â© 2025 Ping Identity Corporation

/*
PingOne Advanced Identity Cloud API

## Introduction The PingOne Advanced Identity Cloud REST API lets you manage your Advanced Identity Cloud tenants. The API exposes access management and identity management endpoints, with additional endpoints specific to Advanced Identity Cloud tenant environments.<br /><br /> We are now publishing the API spec in OpenAPI 3.0. For the legacy Swagger 2.0 spec, please download [swagger.yaml](swagger.yaml), but note that it may not contain all new functionality.<br /><br /> For full PingOne Advanced Identity Cloud documentation, please visit [the docs website](https://docs.pingidentity.com/pingoneaic/latest/). ## Authenticating to the API The PingOne Advanced Identity Cloud REST API has two different authentication methods:   - [API key and secret](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-api-key-and-secret.html): used for tenant read-only operations  - [Access token](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-access-token.html): used for access management operations, identity management operations or tenant write operations  For a summary of how to use these authentication methods, refer to [Authenticate to Advanced Identity Cloud REST API](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-overview.html).

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identitycloud

import (
	"encoding/json"
)

// checks if the EsvCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EsvCount{}

// EsvCount struct for EsvCount
type EsvCount struct {
	Secrets   int64 `json:"secrets"`
	Variables int64 `json:"variables"`
}

// NewEsvCount instantiates a new EsvCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsvCount(secrets int64, variables int64) *EsvCount {
	this := EsvCount{}
	this.Secrets = secrets
	this.Variables = variables
	return &this
}

// NewEsvCountWithDefaults instantiates a new EsvCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsvCountWithDefaults() *EsvCount {
	this := EsvCount{}
	return &this
}

// GetSecrets returns the Secrets field value
func (o *EsvCount) GetSecrets() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value
// and a boolean to check if the value has been set.
func (o *EsvCount) GetSecretsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secrets, true
}

// SetSecrets sets field value
func (o *EsvCount) SetSecrets(v int64) {
	o.Secrets = v
}

// GetVariables returns the Variables field value
func (o *EsvCount) GetVariables() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value
// and a boolean to check if the value has been set.
func (o *EsvCount) GetVariablesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Variables, true
}

// SetVariables sets field value
func (o *EsvCount) SetVariables(v int64) {
	o.Variables = v
}

func (o EsvCount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EsvCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["secrets"] = o.Secrets
	toSerialize["variables"] = o.Variables
	return toSerialize, nil
}

type NullableEsvCount struct {
	value *EsvCount
	isSet bool
}

func (v NullableEsvCount) Get() *EsvCount {
	return v.value
}

func (v *NullableEsvCount) Set(val *EsvCount) {
	v.value = val
	v.isSet = true
}

func (v NullableEsvCount) IsSet() bool {
	return v.isSet
}

func (v *NullableEsvCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsvCount(val *EsvCount) *NullableEsvCount {
	return &NullableEsvCount{value: val, isSet: true}
}

func (v NullableEsvCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsvCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
