/*
PingOne Advanced Identity Cloud API

## Introduction The PingOne Advanced Identity Cloud REST API lets you manage your Advanced Identity Cloud tenants. The API exposes access management and identity management endpoints, with additional endpoints specific to Advanced Identity Cloud tenant environments.<br /><br /> We are now publishing the API spec in OpenAPI 3.0. For the legacy Swagger 2.0 spec, please download [swagger.yaml](swagger.yaml), but note that it may not contain all new functionality.<br /><br /> For full PingOne Advanced Identity Cloud documentation, please visit [the docs website](https://docs.pingidentity.com/pingoneaic/latest/). ## Authenticating to the API The PingOne Advanced Identity Cloud REST API has two different authentication methods:   - [API key and secret](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-api-key-and-secret.html): used for tenant read-only operations  - [Access token](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-with-access-token.html): used for access management operations, identity management operations or tenant write operations  For a summary of how to use these authentication methods, refer to [Authenticate to Advanced Identity Cloud REST API](https://docs.pingidentity.com/pingoneaic/latest/developer-docs/authenticate-to-rest-api-overview.html).

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identitycloud

import (
	"encoding/json"
	"time"
)

// checks if the Release type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Release{}

// Release struct for Release
type Release struct {
	CurrentVersion *string      `json:"currentVersion,omitempty"`
	NextUpgrade    NullableTime `json:"nextUpgrade,omitempty"`
}

// NewRelease instantiates a new Release object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelease() *Release {
	this := Release{}
	return &this
}

// NewReleaseWithDefaults instantiates a new Release object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseWithDefaults() *Release {
	this := Release{}
	return &this
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *Release) GetCurrentVersion() string {
	if o == nil || IsNil(o.CurrentVersion) {
		var ret string
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentVersion) {
		return nil, false
	}
	return o.CurrentVersion, true
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *Release) HasCurrentVersion() bool {
	if o != nil && !IsNil(o.CurrentVersion) {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given string and assigns it to the CurrentVersion field.
func (o *Release) SetCurrentVersion(v string) {
	o.CurrentVersion = &v
}

// GetNextUpgrade returns the NextUpgrade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Release) GetNextUpgrade() time.Time {
	if o == nil || IsNil(o.NextUpgrade.Get()) {
		var ret time.Time
		return ret
	}
	return *o.NextUpgrade.Get()
}

// GetNextUpgradeOk returns a tuple with the NextUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Release) GetNextUpgradeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextUpgrade.Get(), o.NextUpgrade.IsSet()
}

// HasNextUpgrade returns a boolean if a field has been set.
func (o *Release) HasNextUpgrade() bool {
	if o != nil && o.NextUpgrade.IsSet() {
		return true
	}

	return false
}

// SetNextUpgrade gets a reference to the given NullableTime and assigns it to the NextUpgrade field.
func (o *Release) SetNextUpgrade(v time.Time) {
	o.NextUpgrade.Set(&v)
}

// SetNextUpgradeNil sets the value for NextUpgrade to be an explicit nil
func (o *Release) SetNextUpgradeNil() {
	o.NextUpgrade.Set(nil)
}

// UnsetNextUpgrade ensures that no value is present for NextUpgrade, not even an explicit nil
func (o *Release) UnsetNextUpgrade() {
	o.NextUpgrade.Unset()
}

func (o Release) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Release) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentVersion) {
		toSerialize["currentVersion"] = o.CurrentVersion
	}
	if o.NextUpgrade.IsSet() {
		toSerialize["nextUpgrade"] = o.NextUpgrade.Get()
	}
	return toSerialize, nil
}

type NullableRelease struct {
	value *Release
	isSet bool
}

func (v NullableRelease) Get() *Release {
	return v.value
}

func (v *NullableRelease) Set(val *Release) {
	v.value = val
	v.isSet = true
}

func (v NullableRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelease(val *Release) *NullableRelease {
	return &NullableRelease{value: val, isSet: true}
}

func (v NullableRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
